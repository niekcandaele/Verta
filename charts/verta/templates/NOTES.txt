1. Get the application URL by running these commands:
{{- if .Values.ingress.enabled }}
{{- range $host := .Values.ingress.hosts }}
  {{- range .paths }}
  http{{ if $.Values.ingress.tls }}s{{ end }}://{{ tpl $host.host $ }}{{ .path }}
  {{- end }}
{{- end }}
{{- else if contains "NodePort" .Values.frontend.service.type }}
  export NODE_PORT=$(kubectl get --namespace {{ .Release.Namespace }} -o jsonpath="{.spec.ports[0].nodePort}" services {{ include "verta.fullname" . }}-frontend)
  export NODE_IP=$(kubectl get nodes --namespace {{ .Release.Namespace }} -o jsonpath="{.items[0].status.addresses[0].address}")
  echo http://$NODE_IP:$NODE_PORT
{{- else if contains "LoadBalancer" .Values.frontend.service.type }}
     NOTE: It may take a few minutes for the LoadBalancer IP to be available.
           You can watch the status of by running 'kubectl get --namespace {{ .Release.Namespace }} svc -w {{ include "verta.fullname" . }}-frontend'
  export SERVICE_IP=$(kubectl get svc --namespace {{ .Release.Namespace }} {{ include "verta.fullname" . }}-frontend --template "{{"{{ range (index .status.loadBalancer.ingress 0) }}{{.}}{{ end }}"}}")
  echo http://$SERVICE_IP:{{ .Values.frontend.service.port }}
{{- else if contains "ClusterIP" .Values.frontend.service.type }}
  kubectl port-forward --namespace {{ .Release.Namespace }} svc/{{ include "verta.fullname" . }}-frontend 3000:{{ .Values.frontend.service.port }} &
  echo "Visit http://127.0.0.1:3000 to use your application"
{{- end }}

2. Check the deployment status:
  kubectl get deployments -n {{ .Release.Namespace }} -l "app.kubernetes.io/name={{ include "verta.name" . }},app.kubernetes.io/instance={{ .Release.Name }}"

3. Check pod status:
  kubectl get pods -n {{ .Release.Namespace }} -l "app.kubernetes.io/name={{ include "verta.name" . }},app.kubernetes.io/instance={{ .Release.Name }}"

4. View logs:
  # Backend logs
  kubectl logs -n {{ .Release.Namespace }} -l "app.kubernetes.io/name={{ include "verta.name" . }},app.kubernetes.io/instance={{ .Release.Name }},app.kubernetes.io/component=backend" -f

  # Frontend logs
  kubectl logs -n {{ .Release.Namespace }} -l "app.kubernetes.io/name={{ include "verta.name" . }},app.kubernetes.io/instance={{ .Release.Name }},app.kubernetes.io/component=frontend" -f

  # ML service logs
  kubectl logs -n {{ .Release.Namespace }} -l "app.kubernetes.io/name={{ include "verta.name" . }},app.kubernetes.io/instance={{ .Release.Name }},app.kubernetes.io/component=ml" -f

5. Important configuration notes:
{{- if not .Values.secrets.adminApiKey }}
  WARNING: Admin API key not set! Please provide it via --set secrets.adminApiKey=<your-key>
{{- end }}
{{- if not .Values.secrets.databaseUrl }}
  WARNING: Database URL not set! Please provide it via --set secrets.databaseUrl=<your-url>
{{- end }}
{{- if not .Values.secrets.discordBotToken }}
  WARNING: Discord bot token not set! Please provide it via --set secrets.discordBotToken=<your-token>
{{- end }}
