services:
  tidb:
    image: pingcap/tidb:v7.5.0
    container_name: verta-tidb
    environment:
      TIDB_USER: verta_user
      TIDB_PASSWORD: verta_password
    ports:
      - '25001:4000'  # MySQL protocol port
      - '10080:10080' # Status API port
    healthcheck:
      test: ['CMD', 'curl', '-f', 'http://127.0.0.1:10080/status']
      interval: 10s
      timeout: 5s
      retries: 10
      start_period: 30s
    restart: unless-stopped

  redis:
    image: redis:7-alpine
    container_name: verta-redis
    ports:
      - '25002:6379'
    volumes:
      - redis_data:/data
    healthcheck:
      test: ['CMD', 'redis-cli', 'ping']
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped

  app:
    build:
      context: ./backend
      target: dev
    container_name: verta-app
    user: "${UID:-1000}:${GID:-1000}"
    ports:
      - '25000:25000'
    volumes:
      - ./backend:/app
      - /app/node_modules
      - ./_data:/data
    env_file:
      - .env
    environment:
      - NODE_ENV=development
      - DOCKERIZED=true
      - PORT=25000
      - DATABASE_URL=mysql://root:@tidb:4000/verta
      - DATABASE_POOL_SIZE=10
      - LOG_LEVEL=debug
      - REDIS_HOST=redis
      - REDIS_PORT=6379
    depends_on:
      tidb:
        condition: service_healthy
      redis:
        condition: service_healthy
    command: npm run dev
    restart: unless-stopped

volumes:
  redis_data:
